name: 🚀 Deploy to EC2 (Complete)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  REPO_URL: https://github.com/netakenilesh/godproject.git

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v3

      - name: 🔐 Setup SSH
        run: |
          set -x
          mkdir -p ~/.ssh
          printf "%s\n" "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem
          ssh-keyscan -v -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 📤 Prepare and transfer files
        run: |
          set -x
          mkdir -p /tmp/deployment
          cp -r backend frontend docker-compose.prod.yml .env.production nginx.conf /tmp/deployment/ || true
          tar -czf /tmp/deployment.tar.gz -C /tmp/deployment .
          scp -v -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key.pem /tmp/deployment.tar.gz ubuntu@${{ secrets.EC2_HOST }}:/tmp/

      - name: 🚀 Setup and deploy on EC2
        run: |
          set -x
          ssh -v -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key.pem ubuntu@${{ secrets.EC2_HOST }} <<'EOF'
set -e
echo '🎯 Connected to EC2 ✅'
hostname
whoami

# Ensure Docker is installed
if ! command -v docker &> /dev/null; then
  echo '🐳 Installing Docker...'
  sudo apt-get update -y
  sudo apt-get install -y ca-certificates curl gnupg lsb-release
  sudo mkdir -p /etc/apt/keyrings
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
    https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  sudo apt-get update -y
  sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
fi

docker --version
docker compose version

echo '📦 Setting up deployment directory...'
sudo mkdir -p /opt/app
sudo chown ubuntu:ubuntu /opt/app

mv /tmp/deployment.tar.gz /opt/app/
cd /opt/app
tar -xzf deployment.tar.gz
ls -la

if [ ! -f .env.production ]; then
  echo '❌ .env.production missing - create it manually first'
  exit 1
fi

echo '🏗️ Building and starting services...'
sudo docker compose -f docker-compose.prod.yml down || true
sudo docker compose -f docker-compose.prod.yml up --build -d

echo '⏳ Waiting for services to start...'
sleep 30

echo '🗃️ Running database migrations...'
sudo docker compose -f docker-compose.prod.yml exec backend npx prisma db push

echo '✅ Deployment successful!'
EOF

      - name: 🧪 Verify deployment
        run: |
          set -x
          ssh -v -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key.pem ubuntu@${{ secrets.EC2_HOST }} <<'EOF'
echo '🧪 Running verification checks...'
curl -f http://localhost/api/health && echo '✅ Backend health check passed'
curl -f http://localhost && echo '✅ Frontend is serving'
EOF
name: 🚀 Deploy to EC2 (Complete)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  REPO_URL: https://github.com/netakenilesh/godproject.git

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v3

      - name: 🔐 Setup SSH
        run: |
          set -x
          mkdir -p ~/.ssh
          printf "%s\n" "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem
          ssh-keyscan -v -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 📤 Prepare and transfer files
        run: |
          set -x
          mkdir -p /tmp/deployment
          cp -r backend frontend docker-compose.prod.yml .env.production nginx.conf /tmp/deployment/ || true
          tar -czf /tmp/deployment.tar.gz -C /tmp/deployment .
          scp -v -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key.pem /tmp/deployment.tar.gz ubuntu@${{ secrets.EC2_HOST }}:/tmp/

      - name: 🚀 Setup and deploy on EC2
        run: |
          set -x
          ssh -v -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            echo '🎯 Connected to EC2 ✅'
            hostname
            whoami

            # Ensure Docker is installed
            if ! command -v docker &> /dev/null; then
              echo '🐳 Installing Docker...'
              sudo apt-get update -y
              sudo apt-get install -y ca-certificates curl gnupg lsb-release
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo \
                "deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
                https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update -y
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            fi

            docker --version
            docker compose version

            echo '📦 Setting up deployment directory...'
            sudo mkdir -p /opt/app
            sudo chown ubuntu:ubuntu /opt/app

            mv /tmp/deployment.tar.gz /opt/app/
            cd /opt/app
            tar -xzf deployment.tar.gz
            ls -la

            if [ ! -f .env.production ]; then
              echo '❌ .env.production missing - create it manually first'
              exit 1
            fi

            echo '🏗️ Building and starting services...'
            sudo docker compose -f docker-compose.prod.yml down || true
            sudo docker compose -f docker-compose.prod.yml up --build -d

            echo '⏳ Waiting for services to start...'
            sleep 30

            echo '🗃️ Running database migrations...'
            sudo docker compose -f docker-compose.prod.yml exec backend npx prisma db push

            echo '✅ Deployment successful!'
          EOF

      - name: 🧪 Verify deployment
        run: |
          set -x
          ssh -v -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            echo '🧪 Running verification checks...'
            curl -f http://localhost/api/health && echo '✅ Backend health check passed'
            curl -f http://localhost && echo '✅ Frontend is serving'
          EOF